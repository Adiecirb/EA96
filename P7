import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'hourglassSum' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts 2D_INTEGER_ARRAY arr as parameter.
     */

    public static int hourglassSum(List<List<Integer>> arr) {//La funcion toma como entrada una lista de listas, una matriz 2D de enteros.
        
    int maxSum = Integer.MIN_VALUE; //MIN_VALUE hace que cualquier suma claculada a partir de los relojes de arena sera mayor que el valor inicial de maxSum

     for(int i =0; i<4; i++){ // se declaran dos for para recorrer la matriz del reloj de 3x3
        for (int j=0; j<4;j++){ 
            int suma = arr.get(i).get(j)+arr.get(i).get(j+1) //Son las sumas que hay en cada reloj de acuerdo con los renglones y columnas
            + arr.get(i).get(j+2)+
            arr.get(i+1).get(j+1)+
            arr.get(i+2).get(j)+arr.get(i+2).get(j+1)+arr.get(i+2).get(j+2);
         maxSum= Math.max(maxSum, suma);   //compara la suma calculada en cada iteracion con el valor maximo almacenado en maxSum

        }
     }
     
    

    return maxSum; //regresa la el valor de maxSuma, la suma mas alta 19
    }


    }

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        List<List<Integer>> arr = new ArrayList<>();

        IntStream.range(0, 6).forEach(i -> {
            try {
                arr.add(
                    Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                        .map(Integer::parseInt)
                        .collect(toList())
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        int result = Result.hourglassSum(arr);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}

